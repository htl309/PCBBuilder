#version 450

//启用meshshader
#extension GL_NV_mesh_shader: require

//设置工作组中线程的大小，一个工作组有32个线程
//将max_vertices的数量依次放入这些工作组中,要是有64个vertices，那就需要循环两次去执行
//有些meshlet中的vertices数量没有到64.那么最后几个点就重复执行一下
const uint myShaderGroupSize = 32;
const uint maxvertex = 64;


//设置工作组中线程的大小，一个工作组有32个线程
layout(local_size_x = myShaderGroupSize) in;


layout(std140, binding = 0) uniform SceneData {
    mat4 u_ViewProjectionMatrix;
}scene;

struct Linelet {
	vec2 point[2];
	float height[2];
	float angle[2];  
	double width;
};

//读取从CPU那里发送过来的数据
layout(std430,binding = 1) readonly buffer Lets { Linelet lets[]; };
layout(std430,binding = 2) readonly buffer Index { uint index[]; };
layout(std430,binding = 3) readonly buffer Index2 { uint index2[]; };


uniform  mat4 u_transform;
uniform  int u_type;
uniform  int u_letsize;


//规定输出的图元是三角形，当然也可以是线段什么的
//规定顶点最大64个，三角形最多124个，这个是在CPU上会提前预设好的限制,目的是为了匹配GPU的限制
//就是一个meshlet中最多只有64个顶点和124个三角形。
layout(triangles, max_vertices = maxvertex, max_primitives = 124) out;
out vec4 outColor[];

//不同的网格颜色用以达到不同网格分组的效果
vec4 letcolors[10] = {
  vec4(2,0,0,0.5), 
  vec4(0,2,0,0.5), 
  vec4(0,0,2,0.5), 
  vec4(2,2,0,0.5), 
  vec4(2,0,2,0.5), 
  vec4(0,2,2,0.5), 
  vec4(2,1,0,0.5), 
  vec4(1,2,0,0.5), 
  vec4(0,1.0,2.0,0.5), 
  vec4(2,0.5,1,0.5), 
  };
taskNV in Task
{
  uint      baseID;
  uint   deltaIDs[myShaderGroupSize];
   uint LODlevel;
} IN;
void create1();
void create2();
void create3();
void main() {
	
	if(IN.LODlevel == 1 )create1();
	else if(IN.LODlevel == 2 )create2();
	else create3();
	
}
void create1(){
	//获取当前工作组的ID
	//工作组的大小在vulkan中设置，vkCmdDispatch就可以设置大小
	//由于Group和thread都是三维的，这里只用一维的x就可以了,也只设置x就可以啦
	uint groupIndex = gl_WorkGroupID.x;
	//获取工作组下的当前的进程的id
	uint groupThreadIndex = gl_LocalInvocationID.x;
	
	
	//每个工作组处理一个let
	Linelet let= lets[IN.baseID+IN.deltaIDs[groupIndex]]; 

	float angle =(groupThreadIndex%16)/15.0*3.14159;
	//并行计算,每个线程groupThreadIndex，生成内圈的上下两个点
    double vx=let.point[groupThreadIndex/16].x+let.width*cos(angle+let.angle[groupThreadIndex/16]);
	double vy=let.point[groupThreadIndex/16].y+let.width*sin(angle+let.angle[groupThreadIndex/16]);
	mat4 trs=scene.u_ViewProjectionMatrix *u_transform;
	vec4 v0 = trs*vec4(vx,vy,let.height[0],1.0f);
	vec4 v1 = trs*vec4(vx,vy,let.height[1],1.0f);


    gl_MeshVerticesNV[groupThreadIndex].gl_Position=v0;
	gl_MeshVerticesNV[groupThreadIndex+32].gl_Position=v1;
	outColor[groupThreadIndex+32]= letcolors[groupIndex%10];
	outColor[groupThreadIndex]= letcolors[groupIndex%10];
	

	//uint maxtri = 124;
	//计算需要循环几次才能把索引都写入
	//124个三角形也就是说有3*124个索引
	//4 * myShaderGroupSize意思是一次可以写入四个索引数字
	//uint TriangleLoops = (3 * maxtri + 4 * myShaderGroupSize - 1) / (myShaderGroupSize * 4);
    uint TriangleLoops =3;

	//这个是对索引的大小进行一个限制
	//uint packedTrianglesMax = (3 * maxtri - 1) / 4;
	uint packedTrianglesMax =92;
	for (uint i = 0; i < TriangleLoops; ++i)
	{
		//根据工作组和工作组中的线程获取当前需要写入的索引
		uint localTriangleIndex = groupThreadIndex + i * myShaderGroupSize;
		//需要写入的索引不能超过这个
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);

		//这个函数就是写入索引的
		//前一个参数是，从4 * localTriangleIndex的位置开始写入
		//比如比如长度9的8字节索引，分为：4 4 1，三次写入。第0次从0位置写入，第1次从4位置写入，第2次从8位置写入
		//注意的是，CPU里面写入的是uint8类型索引数组，而这里直接读取的是uint类型的数组。实际上这里直接把四个数组一起读取了。
		writePackedPrimitiveIndices4x8NV(4 * localTriangleIndex, index[localTriangleIndex]);
		
	}

	//每个let的三角形数量是一样的，都是124个
    gl_PrimitiveCountNV = 124;
}
void create2(){
	//获取当前工作组的ID
	//工作组的大小在vulkan中设置，vkCmdDispatch就可以设置大小
	//由于Group和thread都是三维的，这里只用一维的x就可以了,也只设置x就可以啦
	uint groupIndex = gl_WorkGroupID.x;
	//获取工作组下的当前的进程的id
	uint groupThreadIndex = gl_LocalInvocationID.x;
	
	
	//每个工作组处理一个let
	Linelet let= lets[IN.baseID+IN.deltaIDs[groupIndex]]; 

	float angle =(groupThreadIndex%8)/7.0*3.14159;

	uint heightid=groupThreadIndex/16;
    
	uint angleid=groupThreadIndex/8%2;
	
    double vx=let.point[angleid].x+let.width*cos(angle+let.angle[angleid]);
    double vy=let.point[angleid].y+let.width*sin(angle+let.angle[angleid]);
	mat4 trs=scene.u_ViewProjectionMatrix *u_transform;

	vec4 v = trs*vec4(vx,vy,let.height[heightid],1.0f);


 
    gl_MeshVerticesNV[groupThreadIndex].gl_Position=v;
	outColor[groupThreadIndex]= letcolors[groupIndex%10];

	//uint maxtri = 60;
	//计算需要循环几次才能把索引都写入
	//124个三角形也就是说有3*124个索引
	//4 * myShaderGroupSize意思是一次可以写入四个索引数字
	//uint TriangleLoops = (3 * maxtri + 4 * myShaderGroupSize - 1) / (myShaderGroupSize * 4);
	uint TriangleLoops=2;
	//这个是对索引的大小进行一个限制
	//uint packedTrianglesMax = (3 * maxtri - 1) / 4;
	uint packedTrianglesMax = 44;
	
	for (uint i = 0; i < TriangleLoops; ++i)
	{
		//根据工作组和工作组中的线程获取当前需要写入的索引
		uint localTriangleIndex = groupThreadIndex + i * myShaderGroupSize;
		//需要写入的索引不能超过这个
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);

		//这个函数就是写入索引的
		//前一个参数是，从4 * localTriangleIndex的位置开始写入
		//比如比如长度9的8字节索引，分为：4 4 1，三次写入。第0次从0位置写入，第1次从4位置写入，第2次从8位置写入
		//注意的是，CPU里面写入的是uint8类型索引数组，而这里直接读取的是uint类型的数组。实际上这里直接把四个数组一起读取了。
		writePackedPrimitiveIndices4x8NV(4 * localTriangleIndex, index2[localTriangleIndex]);
		
	}

	//每个let的三角形数量是一样的，都是124个
    gl_PrimitiveCountNV = 60;
}

void create3(){
	//获取当前工作组的ID
	//工作组的大小在vulkan中设置，vkCmdDispatch就可以设置大小
	//由于Group和thread都是三维的，这里只用一维的x就可以了,也只设置x就可以啦
	uint groupIndex = gl_WorkGroupID.x;
	//获取工作组下的当前的进程的id
	uint groupThreadIndex = gl_LocalInvocationID.x;
	
	
	//每个工作组处理两个个let
	uint letid=IN.baseID+IN.deltaIDs[groupIndex*2+groupThreadIndex/16];
	
	Linelet let= lets[letid]; 
	float angle =(groupThreadIndex%8)/7.0*3.14159;
	uint angleid=groupThreadIndex/8%2;
	
    double vx=let.point[angleid].x+let.width*cos(angle+let.angle[angleid]);
    double vy=let.point[angleid].y+let.width*sin(angle+let.angle[angleid]);
	mat4 trs=scene.u_ViewProjectionMatrix  *u_transform;

	vec4 v = trs*vec4(vx,vy,let.height[0],1.0f);


 
    gl_MeshVerticesNV[groupThreadIndex].gl_Position=v;
	outColor[groupThreadIndex] = letcolors[groupIndex%10];


	//uint maxtri = 14;
	//计算需要循环几次才能把索引都写入
	//124个三角形也就是说有3*124个索引
	//4 * myShaderGroupSize意思是一次可以写入四个索引数字
	//uint TriangleLoops = (3 * maxtri + 4 * myShaderGroupSize - 1) / (myShaderGroupSize * 4);
	uint TriangleLoops = 1;

	//这个是对索引的大小进行一个限制
	//uint packedTrianglesMax = (3 * maxtri - 1) / 4;
	uint packedTrianglesMax =20;
	for (uint i = 0; i < TriangleLoops; ++i)
	{
		//根据工作组和工作组中的线程获取当前需要写入的索引
		uint localTriangleIndex = groupThreadIndex + i * myShaderGroupSize;
		//需要写入的索引不能超过这个
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);

		//这个函数就是写入索引的
		//前一个参数是，从4 * localTriangleIndex的位置开始写入
		//比如比如长度9的8字节索引，分为：4 4 1，三次写入。第0次从0位置写入，第1次从4位置写入，第2次从8位置写入
		//注意的是，CPU里面写入的是uint8类型索引数组，而这里直接读取的是uint类型的数组。实际上这里直接把四个数组一起读取了。
		writePackedPrimitiveIndices4x8NV(4 * localTriangleIndex, index2[localTriangleIndex]);
		
	}

	//每个let的三角形数量是一样的，都是14个
	//剔除了底面和侧面
    gl_PrimitiveCountNV = 28;
}