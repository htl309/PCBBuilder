#version 450

//启用meshshader
#extension GL_NV_mesh_shader: require

//设置工作组中线程的大小，一个工作组有32个线程
//将max_vertices的数量依次放入这些工作组中,要是有64个vertices，那就需要循环两次去执行
//有些meshlet中的vertices数量没有到64.那么最后几个点就重复执行一下
const uint myShaderGroupSize = 32;
const uint maxvertex = 128;

//设置工作组中线程的大小，一个工作组有32个线程
layout(local_size_x = myShaderGroupSize) in;

//输入的UBO矩阵
layout(push_constant) uniform PushConstants {
    mat4 u_transform;
    int u_type;
    int u_letsize;
} pushConstants;

layout(set = 0, binding = 0) uniform SceneData {
    mat4 u_ViewProjectionMatrix;
}scene;

struct Circlelet {
	vec2 center;
	float height[2];
	float r[2];
};



//读取从CPU那里发送过来的数据
layout(set=1,binding = 0) readonly buffer Lets { Circlelet lets[]; };
layout(set=1,binding = 1) readonly buffer Index { uint index[]; };
layout(set=1,binding = 2) readonly buffer Index2 { uint index2[]; };
layout(set=1,binding = 3) readonly buffer Index3 { uint index3[]; };


//规定输出的图元是三角形，当然也可以是线段什么的
//规定顶点最大64个，三角形最多124个，这个是在CPU上会提前预设好的限制,目的是为了匹配GPU的限制
//就是一个meshlet中最多只有64个顶点和124个三角形。
layout(triangles, max_vertices = maxvertex, max_primitives = 256) out;
layout(location = 0) out vec4 outColor[];

//不同的网格颜色用以达到不同网格分组的效果
//不同的网格颜色用以达到不同网格分组的效果
vec4 letcolors[10] = {
  vec4(2,0,0,0.5), 
  vec4(0,2,0,0.5), 
  vec4(0,0,2,0.5), 
  vec4(2,2,0,0.5), 
  vec4(2,0,2,0.5), 
  vec4(0,2,2,0.5), 
  vec4(2,1,0,0.5), 
  vec4(1,2,0,0.5), 
  vec4(0,1.0,2.0,0.5), 
  vec4(2,0.5,1,0.5), 
  };

taskNV in Task
{
  uint      baseID;
  uint   deltaIDs[myShaderGroupSize];
  uint LODlevel;
} IN;

void create1();
void create2();
void create3();
void main() {
	//create3();
	if(IN.LODlevel == 1 )create1();
	else if(IN.LODlevel == 2 )create2();
	else create3();
}
void create1(){
	//获取当前工作组的ID
	//工作组的大小在vulkan中设置，vkCmdDispatch就可以设置大小
	//由于Group和thread都是三维的，这里只用一维的x就可以了,也只设置x就可以啦
	uint groupIndex = gl_WorkGroupID.x;
	//获取工作组下的当前的进程的id
	uint groupThreadIndex = gl_LocalInvocationID.x;
	
	
	//每个工作组处理一个let
	Circlelet let= lets[IN.baseID + IN.deltaIDs[groupIndex] ] ; 
    
	mat4 trs=scene.u_ViewProjectionMatrix *pushConstants.u_transform;
	//并行计算,每个线程groupThreadIndex，生成外圈的上下两个点
    double v0x=let.center.x+let.r[1]*cos(groupThreadIndex/16.0*3.14159);
	double v0y=let.center.y+let.r[1]*sin(groupThreadIndex/16.0*3.14159);
	vec4 v0 = trs*vec4(v0x,v0y,let.height[0],1.0f);
	vec4 v1 = trs*vec4(v0x,v0y,let.height[1],1.0f);



	
	gl_MeshVerticesNV[groupThreadIndex].gl_Position=v0;
	gl_MeshVerticesNV[groupThreadIndex+32].gl_Position=v1;

	double vx=let.center.x+let.r[0]*cos(0);
	double vy=let.center.y+let.r[0]*sin(0);
	vec4 vx1 = trs*vec4(let.center.x+let.r[0]*sin(0),let.center.x+let.r[0]*cos(0),let.height[0],1.0f);
	vec4 vx2 = trs*vec4(let.center.x+let.r[1]*sin(0),let.center.x+let.r[1]*cos(0),let.height[0],1.0f);
	double width=sqrt((vx1[0]-vx2[0])*(vx1[0]-vx2[0])+(vx1[1]-vx2[1])*(vx1[1]-vx2[1]));

	
	//生成内圈的两个点
		double v1x=let.center.x+let.r[0]*cos(groupThreadIndex/16.0*3.14159);
		double v1y=let.center.y+let.r[0]*sin(groupThreadIndex/16.0*3.14159);
		vec4 v2 = trs*vec4(v1x,v1y,let.height[0],1.0f);
		vec4 v3 = trs*vec4(v1x,v1y,let.height[1],1.0f);
		gl_MeshVerticesNV[groupThreadIndex+64].gl_Position=v2;
		gl_MeshVerticesNV[groupThreadIndex+96].gl_Position=v3;

		uint colorindex=groupIndex%10;
		outColor[groupThreadIndex]= letcolors[colorindex];
		outColor[groupThreadIndex+32]= letcolors[colorindex];
		outColor[groupThreadIndex+64]= letcolors[colorindex];
		outColor[groupThreadIndex+96]= letcolors[colorindex];
	

	//uint maxtri = 256;


	//计算需要循环几次才能把索引都写入
	//124个三角形也就是说有3*124个索引
	//4 * myShaderGroupSize意思是一次可以写入四个索引数字
	//uint TriangleLoops = (3 * maxtri + 4 * myShaderGroupSize - 1) / (myShaderGroupSize * 4);

	uint TriangleLoops = 6;

	//这个是对索引的大小进行一个限制
	//uint packedTrianglesMax = (3 * maxtri - 1) / 4;
	uint packedTrianglesMax = 191;

	for (uint i = 0; i < TriangleLoops; ++i)
	{
		//根据工作组和工作组中的线程获取当前需要写入的索引
		uint localTriangleIndex = groupThreadIndex + i * myShaderGroupSize;
		//需要写入的索引不能超过这个
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);

		//这个函数就是写入索引的
		//前一个参数是，从4 * localTriangleIndex的位置开始写入
		//比如比如长度9的8字节索引，分为：4 4 1，三次写入。第0次从0位置写入，第1次从4位置写入，第2次从8位置写入
		//注意的是，CPU里面写入的是uint8类型索引数组，而这里直接读取的是uint类型的数组。实际上这里直接把四个数组一起读取了。
		writePackedPrimitiveIndices4x8NV(4 * localTriangleIndex, index[localTriangleIndex]);
		
	}

	//每个let的三角形数量是一样的，都是256个
    gl_PrimitiveCountNV = 256;
}

void create2(){
	//获取当前工作组的ID
	//工作组的大小在vulkan中设置，vkCmdDispatch就可以设置大小
	//由于Group和thread都是三维的，这里只用一维的x就可以了,也只设置x就可以啦
	uint groupIndex = gl_WorkGroupID.x;
	//获取工作组下的当前的进程的id
	uint groupThreadIndex = gl_LocalInvocationID.x;
	
	
	//每个工作组处理一个let
	Circlelet let= lets[IN.baseID + IN.deltaIDs[groupIndex] ] ; 
    
	mat4 trs=scene.u_ViewProjectionMatrix *pushConstants.u_transform;
	//并行计算,每个线程groupThreadIndex，生成外圈和内圈的上下两个点
    double vx=let.center.x+let.r[groupThreadIndex/16]*cos(groupThreadIndex/8.0*3.14159);
	double vy=let.center.y+let.r[groupThreadIndex/16]*sin(groupThreadIndex/8.0*3.14159);
	vec4 v0 = trs*vec4(vx,vy,let.height[0],1.0f);
	vec4 v1 = trs*vec4(vx,vy,let.height[1],1.0f);



	
	gl_MeshVerticesNV[groupThreadIndex].gl_Position=v0;
	gl_MeshVerticesNV[groupThreadIndex+32].gl_Position=v1;


	uint colorindex=groupIndex%10;
	outColor[groupThreadIndex]= letcolors[colorindex];
	outColor[groupThreadIndex+32]= letcolors[colorindex];

	

	//uint maxtri = 128;
	//计算需要循环几次才能把索引都写入
	//124个三角形也就是说有3*124个索引
	//4 * myShaderGroupSize意思是一次可以写入四个索引数字
	//uint TriangleLoops = (3 * maxtri + 4 * myShaderGroupSize - 1) / (myShaderGroupSize * 4);

    uint TriangleLoops = 4;


	//这个是对索引的大小进行一个限制
	//uint packedTrianglesMax = (3 * maxtri - 1) / 4;
	uint packedTrianglesMax = 95;
	for (uint i = 0; i < TriangleLoops; ++i)
	{
		//根据工作组和工作组中的线程获取当前需要写入的索引
		uint localTriangleIndex = groupThreadIndex + i * myShaderGroupSize;
		//需要写入的索引不能超过这个
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);

		//这个函数就是写入索引的
		//前一个参数是，从4 * localTriangleIndex的位置开始写入
		//比如比如长度9的8字节索引，分为：4 4 1，三次写入。第0次从0位置写入，第1次从4位置写入，第2次从8位置写入
		//注意的是，CPU里面写入的是uint8类型索引数组，而这里直接读取的是uint类型的数组。实际上这里直接把四个数组一起读取了。
		writePackedPrimitiveIndices4x8NV(4 * localTriangleIndex, index2[localTriangleIndex]);
		
	}

	//每个let的三角形数量是一样的，都是256个
    gl_PrimitiveCountNV = 128;
}

void create3(){
	//获取当前工作组的ID
	//工作组的大小在vulkan中设置，vkCmdDispatch就可以设置大小
	//由于Group和thread都是三维的，这里只用一维的x就可以了,也只设置x就可以啦
	uint groupIndex = gl_WorkGroupID.x;
	//获取工作组下的当前的进程的id
	uint groupThreadIndex = gl_LocalInvocationID.x;
	
	
	//每个工作组处理一个let
	Circlelet let= lets[IN.baseID + IN.deltaIDs[groupIndex] ] ; 
    
    mat4 trs=scene.u_ViewProjectionMatrix *pushConstants.u_transform;

	uint heightid=groupThreadIndex/16;
    
	uint radiusid=groupThreadIndex/8%2;

    double vx=let.center.x+let.r[radiusid]*cos(groupThreadIndex/4.0*3.14159);
	double vy=let.center.y+let.r[radiusid]*sin(groupThreadIndex/4.0*3.14159);
	vec4 v = trs*vec4(vx,vy,let.height[heightid],1.0f);
	

	gl_MeshVerticesNV[groupThreadIndex].gl_Position=v;

	uint colorindex=groupIndex%10;
	outColor[groupThreadIndex]= letcolors[colorindex];
	

	//uint maxtri = 64;
	//计算需要循环几次才能把索引都写入
	//124个三角形也就是说有3*124个索引
	//4 * myShaderGroupSize意思是一次可以写入四个索引数字
	//uint TriangleLoops = (3 * maxtri + 4 * myShaderGroupSize - 1) / (myShaderGroupSize * 4);

    uint TriangleLoops = 2;


	//这个是对索引的大小进行一个限制
	//uint packedTrianglesMax = (3 * maxtri - 1) / 4;
	uint packedTrianglesMax = 47;
	for (uint i = 0; i < TriangleLoops; ++i)
	{
		//根据工作组和工作组中的线程获取当前需要写入的索引
		uint localTriangleIndex = groupThreadIndex + i * myShaderGroupSize;
		//需要写入的索引不能超过这个
		localTriangleIndex = min(localTriangleIndex, packedTrianglesMax);

		//这个函数就是写入索引的
		//前一个参数是，从4 * localTriangleIndex的位置开始写入
		//比如比如长度9的8字节索引，分为：4 4 1，三次写入。第0次从0位置写入，第1次从4位置写入，第2次从8位置写入
		//注意的是，CPU里面写入的是uint8类型索引数组，而这里直接读取的是uint类型的数组。实际上这里直接把四个数组一起读取了。
		writePackedPrimitiveIndices4x8NV(4 * localTriangleIndex, index3[localTriangleIndex]);
		
	}

	//每个let的三角形数量是一样的，都是256个
    gl_PrimitiveCountNV = 64;
}